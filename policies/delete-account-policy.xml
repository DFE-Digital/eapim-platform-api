<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<base />
		<set-variable name="userName" value="@{&#xA;            JObject inBody = context.Request.Body.As&lt;JObject&gt;(preserveContent: true); &#xA;            string userName = inBody.GetValue(&quot;userName&quot;).ToString();&#xA;            return userName;&#xA;        }" />
		<set-variable name="userID" value="@{&#xA;            JObject inBody = context.Request.Body.As&lt;JObject&gt;(preserveContent: true); &#xA;            string userID = inBody.GetValue(&quot;userID&quot;).ToString();&#xA;            return userID;&#xA;        }" />
		<set-variable name="userEmail" value="@{&#xA;            JObject inBody = context.Request.Body.As&lt;JObject&gt;(preserveContent: true); &#xA;            string userEmail = inBody.GetValue(&quot;userEmail&quot;).ToString();&#xA;            return userEmail;&#xA;        }" />
		
    <set-variable name="isValidUsername" value="@{
        return Regex.Match((string) context.Variables[&quot;userName&quot;], &quot;^[^&lt;&gt;]+$&quot;).Value.ToString() != &quot;&quot; ? true : false;
    }" />
    <set-variable name="isValidUserID" value="@{
        return Regex.Match((string) context.Variables[&quot;userID&quot;], &quot;^[^&lt;&gt;]+$&quot;).Value.ToString() != &quot;&quot; ? true : false;
    }" />
    <set-variable name="isValidEmail" value="@{
        return Regex.Match((string) context.Variables[&quot;userEmail&quot;], &quot;^[^&lt;&gt;]+$&quot;).Value.ToString() != &quot;&quot; ? true : false;
    }" />
    <choose>
      <when condition="@(!Convert.ToBoolean(context.Variables[&quot;isValidUsername&quot;]))">
        <return-response>
            <set-status code="500" reason="User name contains invalid characters." />
        </return-response>
      </when>
      <when condition="@(!Convert.ToBoolean(context.Variables[&quot;isValidUserID&quot;]))">
        <return-response>
            <set-status code="500" reason="User ID contains invalid characters." />
        </return-response>
      </when>
      <when condition="@(!Convert.ToBoolean(context.Variables[&quot;isValidEmail&quot;]))">
        <return-response>
            <set-status code="500" reason="User email contains invalid characters." />
        </return-response>
      </when>
    </choose>
    
    <send-request ignore-error="true" timeout="20" response-variable-name="bearerToken" mode="new">
			<set-url>https://login.microsoftonline.com/{{eapim-platform-api-b2c-graph-tenant}}/oauth2/v2.0/token</set-url>
			<set-method>POST</set-method>
			<set-header name="Content-Type" exists-action="override">
				<value>application/x-www-form-urlencoded</value>
			</set-header>
			<set-body>@{
                return "client_id={{eapim-platform-api-b2c-graph-clientid}}&amp;scope={{eapim-platform-api-b2c-graph-scope}}&amp;client_secret={{eapim-platform-api-b2c-graph-secret}}&amp;grant_type=client_credentials";
            }</set-body>
		</send-request>
		<!-- <set-header name="Authorization" exists-action="override"> 
            <value>@("Bearer " + (String)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>()["access_token"])</value>
        </set-header> 
        <set-variable name="acc_token" value="@("Bearer "+ (String)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>()["access_token"])" /> -->
		<set-variable name="acc_token2" value="@{&#xA;        String rawToken = (String)((IResponse)context.Variables[&quot;bearerToken&quot;]).Body.As&lt;JObject&gt;()[&quot;access_token&quot;];&#xA;        return &quot;Bearer &quot;+rawToken;&#xA;        }" />
		<set-variable name="backend_url" value="@{&#xA;            String userID = (string) context.Variables[&quot;userID&quot;];&#xA;            String backendurl = &quot;{{eapim-platform-api-b2c-graph-users-url}}/&quot; + userID;&#xA;            return backendurl;&#xA;        }" />
		<set-backend-service base-url="@{&#xA;            return (string) context.Variables[&quot;backend_url&quot;];&#xA;            }" />
		<send-request ignore-error="true" timeout="20" response-variable-name="appsData" mode="new">
			<set-url>@((string)context.Variables["backend_url"])</set-url>
			<set-method>DELETE</set-method>
			<set-header name="Authorization" exists-action="override">
				<value>@((string)context.Variables["acc_token2"])</value>
			</set-header>
			<set-header name="Content-Type" exists-action="override">
				<value>application/json</value>
			</set-header>
		</send-request>
		<return-response response-variable-name="appsData">
			<set-header name="Content-Type" exists-action="override">
				<value>application/json</value>
			</set-header>
		</return-response>
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>