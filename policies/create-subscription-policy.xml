<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<base />
		<set-variable name="applicationId" value="@{&#xA;            JObject inBody = context.Request.Body.As&lt;JObject&gt;(preserveContent: true); &#xA;            string appId = inBody.GetValue(&quot;applicationId&quot;).ToString();&#xA;            return appId;&#xA;        }" />
		<set-variable name="apiName" value="@{&#xA;            JObject inBody = context.Request.Body.As&lt;JObject&gt;(preserveContent: true); &#xA;            string apiName = inBody.GetValue(&quot;apiName&quot;).ToString();&#xA;            return apiName;&#xA;        }" />
		<set-variable name="environment" value="@{&#xA;            JObject inBody = context.Request.Body.As&lt;JObject&gt;(preserveContent: true); &#xA;            string env = inBody.GetValue(&quot;environment&quot;).ToString();&#xA;            return env;&#xA;        }" />
		<!-- validate environment-->
		<choose>
			<when condition="@(((string)context.Variables[&quot;environment&quot;]).ToLower().Equals(&quot;&quot;))">
				<return-response>
					<set-status code="500" reason="Invalid environment specified." />
				</return-response>
			</when>
			<when condition="@(!(((string)context.Variables[&quot;environment&quot;]).ToLower().Equals(&quot;production&quot;) || ((string)context.Variables[&quot;environment&quot;]).ToLower().Equals(&quot;sandbox&quot;) || ((string)context.Variables[&quot;environment&quot;]).ToLower().Equals(&quot;delegated&quot;)  )) ">
				<return-response>
					<set-status code="500" reason="Invalid environment specified." />
				</return-response>
			</when>
		</choose>
		<set-variable name="isSandbox" value="@(((string)context.Variables[&quot;environment&quot;]).ToLower().Equals(&quot;sandbox&quot;))" />
		<choose>
			<when condition="@(context.Variables.GetValueOrDefault&lt;bool&gt;(&quot;isSandbox&quot;))">
				<set-variable name="create_subscription_backend_url_sandbox" value="@{&#xA;                    string url = &quot;{{eapim-platform-api-sandbox-baseurl}}/Subscription&quot;;&#xA;                    return url;&#xA;                }" />
				<send-request ignore-error="false" timeout="200" response-variable-name="createSubData-Sandbox">
					<set-url>@((string)context.Variables["create_subscription_backend_url_sandbox"])</set-url>
					<set-method>POST</set-method>
					<set-header name="Content-Type" exists-action="override">
						<value>application/json</value>
					</set-header>
					<set-header name="Ocp-Apim-Subscription-Key" exists-action="override">
						<value>{{eapim-platform-api-sandbox-subscription-key}}</value>
					</set-header>
					<set-body>@{
                        String applicationId  = (string) context.Variables["applicationId"]; 
                        String apiName =  (string) context.Variables["apiName"]; 
                        string environment = "delegated";
                        JObject props = new JObject();
                        props.Add("applicationId",applicationId);
                        props.Add("apiName",apiName);
                        props.Add("environment",environment);
                        return props.ToString();
                    }</set-body>
				</send-request>
				<return-response response-variable-name="createSubData-Sandbox">
					<set-body>@{
                            var subsDataToRead = (JObject) ((IResponse)context.Variables["createSubData-Sandbox"]).Body.As&lt;JObject&gt;();
                            JObject valueObj = (JObject) subsDataToRead["value"];
                            valueObj["environment"] = "Sandbox";
                            return subsDataToRead.ToString();
                        }</set-body>
				</return-response>
			</when>
			<otherwise />
		</choose>
		<set-variable name="management-api-token" value="@{&#xA;                var id = &quot;{{eapim-platform-api-management-identifier}}&quot;;   &#xA;                    var key = &quot;{{eapim-platform-api-management-key}}&quot;;   &#xA;                    DateTime expiry = DateTime.UtcNow.AddDays(10);&#xA;                    string encodedToken = &quot;&quot;;   &#xA;                    using (var encoder = new System.Security.Cryptography.HMACSHA512(Encoding.UTF8.GetBytes(key)))   &#xA;                    {   &#xA;                        var dataToSign = id + &quot;\n&quot; + expiry.ToString(&quot;O&quot;);   &#xA;                        var hash = encoder.ComputeHash(Encoding.UTF8.GetBytes(dataToSign));   &#xA;                        var signature = Convert.ToBase64String(hash);   &#xA;                        encodedToken = string.Format(&quot;SharedAccessSignature uid={0}&amp;ex={1:o}&amp;sn={2}&quot;, id, expiry, signature);   &#xA;                    }                   &#xA;                    return encodedToken;&#xA;        }" />
		<set-variable name="ownerId" value="@{&#xA;        String applicationId =  (string) context.Variables[&quot;applicationId&quot;];&#xA;        applicationId = applicationId.Trim('\'');&#xA;        String ownerId = &quot;ddhub-&quot;+applicationId + &quot;-eapim-com&quot;;&#xA;        return ownerId;&#xA;        }" />
		<set-variable name="scope" value="@{&#xA;        String apiName =  (string) context.Variables[&quot;apiName&quot;];&#xA;        apiName = apiName.Trim('\'');&#xA;        String scope = &quot;/apis/&quot;+ apiName;&#xA;        return scope;&#xA;        }" />
		<set-variable name="subscriptionId" value="@{&#xA;        String ownerId =  (string) context.Variables[&quot;ownerId&quot;];&#xA;        String apiName =  (string) context.Variables[&quot;apiName&quot;];&#xA;        String subscriptionId = ownerId + &quot;-&quot; + apiName;&#xA;        return subscriptionId;&#xA;        }" />
		<send-request ignore-error="true" timeout="200" response-variable-name="subsData">
			<set-url>{{eapim-platform-api-create-subscription-logic-app}}</set-url>
			<set-method>POST</set-method>
			<set-header name="Content-Type" exists-action="override">
				<value>application/json</value>
			</set-header>
			<set-body>@{
                        String encodedToken  = (string) context.Variables["management-api-token"]; 
                        String ownerId  = (string) context.Variables["ownerId"]; 
                        String scope = (string) context.Variables["scope"]; 
                        String subscriptionId =   (string) context.Variables["subscriptionId"];
                        JObject result = new JObject();
                        JObject props = new JObject();
                        props.Add("authorization",encodedToken);
                        props.Add("subscriptionId", subscriptionId);   
                        props.Add("ownerId","/users/"+ownerId);
                        props.Add("scope",scope);
                        props.Add("displayName",subscriptionId);
                        result.Add("properties",props);
                        return result.ToString();
                    }</set-body>
		</send-request>
		<set-variable name="subscriptionresponse" value="@{&#xA;                var subsDataToRead = ((IResponse)context.Variables[&quot;subsData&quot;]).Body.As&lt;JObject&gt;();&#xA;            &#x9;JArray subsArray = new JArray();&#xA;            &#x9;JObject subsDataToReturn = new JObject();&#xA;            &#x9;JObject o = (JObject)subsDataToRead;&#xA;&#xA;&#xA;              &#x9;  JObject subsDataToWrite = new JObject();&#xA;               &#x9;  string sID = o[&quot;id&quot;].ToString();&#xA;              &#x9;  string sName = o[&quot;name&quot;].ToString();&#xA;                  JObject props = (JObject)o[&quot;properties&quot;];  &#xA;               &#x9;  string sState = props[&quot;state&quot;].ToString();&#xA;                  string sCreatedOn = String.Empty;&#xA;                  if (props[&quot;createdDate&quot;] != null) &#xA;                  { &#xA;                    sCreatedOn = props[&quot;createdDate&quot;].ToString();  &#xA;                  }&#xA;&#xA;                  string sEndDate = String.Empty;&#xA;                  if (props[&quot;endDate&quot;] != null) &#xA;                  { &#xA;                    sEndDate = props[&quot;endDate&quot;].ToString();  &#xA;                  }&#xA;&#xA;                  string sStartDate = String.Empty;&#xA;                  if (props[&quot;startDate&quot;] != null) &#xA;                  { &#xA;                    sStartDate = props[&quot;startDate&quot;].ToString();  &#xA;                  }&#xA;&#xA;&#xA;                  string sExpDate = String.Empty;&#xA;                  if (props[&quot;expirationDate&quot;] != null) &#xA;                  { &#xA;                    sExpDate = props[&quot;expirationDate&quot;].ToString();  &#xA;                  }&#xA;&#xA;&#xA;                  string sScope = String.Empty;&#xA;                  if (props[&quot;scope&quot;] != null) &#xA;                  { &#xA;                    sScope = props[&quot;scope&quot;].ToString();  &#xA;                  }&#xA;&#xA;                  subsDataToWrite.Add(&quot;name&quot;, sName);&#xA;                  subsDataToWrite.Add(&quot;state&quot;, sState);&#xA;                  String environment  = (string) context.Variables[&quot;environment&quot;]; &#xA;                  subsDataToWrite.Add(&quot;environment&quot;, environment);&#xA;                  subsDataToWrite.Add(&quot;createdDate&quot;, sCreatedOn);&#xA;                  subsDataToWrite.Add(&quot;id&quot;,sID.Substring(sID.LastIndexOf(&quot;/&quot;)+1));&#xA;                  subsDataToWrite.Add(&quot;startDate&quot;,sStartDate);&#xA;                  subsDataToWrite.Add(&quot;expirationDate&quot;,sExpDate);&#xA;                  subsDataToWrite.Add(&quot;apiName&quot;,sScope.Substring(sScope.LastIndexOf(&quot;/&quot;)+1));&#xA;  &#x9;              subsDataToReturn.Add(&quot;value&quot;,subsDataToWrite);&#xA;                 return subsDataToReturn.ToString();&#xA;        }" />
		<send-request ignore-error="true" timeout="200" response-variable-name="logAppEmail">
			<set-url>{{eapim-platform-api-create-subscription-logic-app-send-email}}</set-url>
			<set-method>POST</set-method>
			<set-header name="Content-Type" exists-action="override">
				<value>application/json</value>
			</set-header>
			<set-body>@{
                    String subscriptionresponse  = (string) context.Variables["subscriptionresponse"]; 
                    return subscriptionresponse;
                    }</set-body>
		</send-request>
		<return-response response-variable-name="subsData">
			<set-header name="Content-Type" exists-action="override">
				<value>application/json</value>
			</set-header>
			<set-body>@{
                    String subscriptionresponse  = (string) context.Variables["subscriptionresponse"]; 
                    return subscriptionresponse;
            }</set-body>
		</return-response>
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>